version: '3.8' # Specify docker-compose version

services:
  # Go Backend Service
  backend:
    build: . # Build the image from the Dockerfile in the current directory
    container_name: go_ecommerce_backend
    ports:
      - "8080:8080" # Map host port 8080 to container port 8080 (adjust if needed)
    environment:
      # Inject configuration as environment variables
      # These values override defaults in config.go and any .env file copied into the image
      - SERVER_PORT=8080
      # IMPORTANT: Use service names (postgres_db, mongo_db) for hostnames
      - POSTGRES_URL=postgres://devuser:devpassword@postgres_db:5432/ecommerce_dev?sslmode=disable
      - MONGO_URI=mongodb://devuser:devpassword@mongo_db:27017/ecommerce_dev?authSource=admin
      # Add other necessary env vars (JWT_SECRET, etc.)
      # - JWT_SECRET=yoursecretfordocker
    depends_on:
      postgres_db: # Service name
        condition: service_healthy # Wait condition
      mongo_db:    # Service name
        condition: service_started # MongoDB starts faster, 'started' is usually enough
                                   # Could add 'service_healthy' if needed
    networks:
      - ecommerce_network # Connect to the custom network

  # PostgreSQL Service
    # PostgreSQL Service
  postgres_db:
    image: postgres:15-alpine # Use official PostgreSQL image
    container_name: go_ecommerce_postgres
    environment:
      # Set database credentials (match these in backend's POSTGRES_URL)
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=devpassword
      - POSTGRES_DB=ecommerce_dev # Database name
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist database data
    ports:
      # Optional: Map port 5432 to host for external tools (e.g., pgAdmin)
      - "5432:5432"
    networks:
      - ecommerce_network # Connect to the custom network
    # Add Healthcheck:
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devuser -d ecommerce_dev -h localhost"]
      interval: 5s   # Check every 5 seconds
      timeout: 5s    # Wait 5 seconds for check to complete
      retries: 5     # Attempt 5 times before marking as unhealthy
      start_period: 10s # Grace period for startup before first check
    
    
  # MongoDB Service
  mongo_db:
    image: mongo:6 # Use official MongoDB image
    container_name: go_ecommerce_mongo
    environment:
      # Set MongoDB credentials (match these in backend's MONGO_URI)
      # These create the root user, which is then used for authentication
      - MONGO_INITDB_ROOT_USERNAME=devuser
      - MONGO_INITDB_ROOT_PASSWORD=devpassword
    volumes:
      - mongo_data:/data/db # Persist database data
    ports:
      # Optional: Map port 27017 to host for external tools (e.g., MongoDB Compass)
      - "27017:27017"
    networks:
      - ecommerce_network # Connect to the custom network

# Define Volumes for data persistence
volumes:
  postgres_data:
  mongo_data:

# Define a custom network
networks:
  ecommerce_network:
    driver: bridge # Use the default bridge driver